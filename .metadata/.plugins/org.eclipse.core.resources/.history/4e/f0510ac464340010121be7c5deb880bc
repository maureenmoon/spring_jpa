package com.study.spring.image.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import com.study.spring.image.dto.TestDto;
import com.study.spring.image.dto.TestResponseDto;
import com.study.spring.image.dto.TestUpdateDto;
import com.study.spring.image.service.TestService;
import com.study.spring.util.CustomfileUtil;
import lombok.extern.log4j.Log4j2;

@RestController
@RequestMapping("/api/test") //path 공통화
@Log4j2
public class TestController {
	
	@Autowired
	private CustomfileUtil fileUtil;
	
	@Autowired
	private TestService testService;                                                                       
	
	// create
	@PostMapping("/")
	public Map<String, String> testPost(
			@ModelAttribute TestDto testDto
			) {
		System.out.println("post"+testDto);
		
		List<MultipartFile> files = testDto.getFiles();
		
		//fileUtil 문자로 변경하는 함수
		//uploadfile 폴더에 저장
		List<String> uploadFileNames = fileUtil.uploadFile(files);
		
		testDto.setUploadFileNames(uploadFileNames);
		log.info("filenames : " + uploadFileNames);
		
		testService.testInsert(testDto);
		
		return Map.of("result", "success");
	}
	// upload
	@GetMapping("/images/{fileName}")
	public ResponseEntity<Resource> viewfiles(
			@PathVariable("fileName") String fileName
			) {
		return fileUtil.getFile(fileName);
	}

//	@GetMapping("/")
//	public ResponseEntity<Map<String, Object>> testListView(){
//		List<TestResponseDto> testList = testService.getList();
//		return ResponseEntity.ok(Map.of("result","success","data",testList));
//	}
	
	//pagination and list
	//Map: key value형태로 내보냄
	@GetMapping("/")
	public ResponseEntity<Map<String, Object>> testList(
			
			@PageableDefault(size =10, sort = "id", direction = Sort.Direction.DESC) Pageable pageable){
		Page<TestResponseDto> testList = testService.getList(pageable);
		return ResponseEntity.ok(Map.of("result","success","data",testList));
	}
	
	//view : data 가져오기
	@GetMapping("/view/{id}")
	public ResponseEntity<Map<String, Object>> testListView(
			@PathVariable("id") Long id
			){
		TestResponseDto test = testService.getbyId(id);
		return ResponseEntity.ok(Map.of("result","success","data",test));
	}
	
	//delete 삭제했을때 toast로 결과 표기
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<Map<String, Object>> testDelete(                            
			@PathVariable("id") Long id
			){
		boolean isDeleted = testService.testDelete(id);
		if(isDeleted) {
			return ResponseEntity.ok(Map.of("result","success","deleteId",id));
		} else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND)
					.body(Map.of("result","fail","message","no data","id",id));
		}	
	}
	
	//update
	@PutMapping("/update/{id}")
	public ResponseEntity<Map<String, Object>> updatePost(
			@PathVariable("id") Long id,
			@ModelAttribute TestUpdateDto dto
			){
		List<String> uploadedFileNames = new ArrayList<>();
		if(dto.getFiles() != null && !dto.getFiles().isEmpty()) {
			uploadedFileNames = fileUtil.uploadFile(dto.getFiles());
			//image는 폴더에 넣고, file name 내보내기
			dto.setNewUploadedFileNames(uploadedFileNames);//updated file
		}
		List<String> totalUpdatedFileNames = new ArrayList<>();
		if(dto.getUpdatedFileNames() != null) {
			totalUpdatedFileNames.addAll(dto.getUpdatedFileNames());
		}
		totalUpdatedFileNames.addAll(uploadedFileNames);
		dto.setUpdatedFileNames(totalUpdatedFileNames);
		
		testService.updateTest(id, dto);//수정자료 db에 넣자	
		
		return ResponseEntity.ok(Map.of("result","success","id",id));
	}	
}









