package com.study.spring.posts;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.study.spring.posts.DPosts.Request;
import com.study.spring.posts.DPosts.Response;
import com.study.spring.postsLike.EPostsLike;
import com.study.spring.postsLike.PostsLikeRepository;
import com.study.spring.postsLike.postsLikeRepository;
import com.study.spring.user.EUser;
import com.study.spring.user.UserRepository;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PostsService {
	
	private final PostsRepository postsRepository;
	private final UserRepository userRepository;
	private final PostsLikeRepository postsLikeRepository;
	
	
	//create
	@Transactional
	public Long createPost(DPosts.Request dto) {
		EUser user = userRepository.findById(dto.getUserId())
				.orElseThrow(()-> new IllegalArgumentException("User not found"));
		return postsRepository.save(dto.toEntity(user)).getId();
	}
	
	//read
	public DPosts.Response getPost(Long id) {
        EPosts post = postsRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Post not found"));
        return new DPosts.Response(post);
    }
	
//	//list all posts with comments
//	public List<DPosts.Response> getAllPostsWithComments() {
//		return postsRepository.findAll().stream()
//				.map(post-> new DPosts.Response(post))
//				.toList();
//	}
	
	//pagination
	public Page<DPosts.Response> getAllPosts(Pageable pageable) {
		return postsRepository.findAll(pageable).map(DPosts.Response::new);
	}
	
	//update
	@Transactional
	public void updatePost(Long id, DPosts.Request dto) {
        EPosts post = postsRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Post not found"));
	        post.setTitle(dto.getTitle());
	        post.setContent(dto.getContent());
	        post.setWriter(dto.getWriter());
  
    }

    @Transactional
    public void deletePost(Long id) {
        postsRepository.deleteById(id);
    }

    @Transactional
    public void likePost(Long userId, Long postId) {
    	if (postsLikeRepository.existsByUserAndPostId(userId, postId)) {
    		throw new IllegalArgumentException("Already liked");
    	}
    	EUser user = userRepository.findById(userId).orElseThrow(()-> new IllegalArgumentException("User not found"));
    	EPosts post = postsRepository.findById(postId).orElseThrow(()-> new IllegalArgumentException("Post not found"));
    	
    	post.increseLikes();
    	
    	postsLikeRepository.save(EPostsLike.builder().user(user).posts(post).build());
    
    }

	public List<Response> getTop10PostsByLikes() {

		return postsRepository.findTop10ByOrderByLikesDesc().stream().map(DPosts.Response::new).toList();
	}

			
}
